import { initializeApp } from "firebase/app";
import { 
  getAuth, 
  RecaptchaVerifier,
  signInWithPhoneNumber,
  PhoneAuthProvider,
  signOut as firebaseSignOut,
  GoogleAuthProvider,
  signInWithRedirect,
  getRedirectResult
} from "firebase/auth";

// Check for Firebase configuration
const firebaseApiKey = import.meta.env.VITE_FIREBASE_API_KEY;
const firebaseProjectId = import.meta.env.VITE_FIREBASE_PROJECT_ID;
const firebaseAppId = import.meta.env.VITE_FIREBASE_APP_ID;

// Validate Firebase configuration
if (!firebaseApiKey || !firebaseProjectId || !firebaseAppId) {
  console.warn("Firebase configuration is incomplete. Authentication features may not work properly.", {
    hasApiKey: !!firebaseApiKey,
    hasProjectId: !!firebaseProjectId,
    hasAppId: !!firebaseAppId
  });
}

// Firebase configuration
const firebaseConfig = {
  apiKey: firebaseApiKey,
  authDomain: firebaseProjectId ? `${firebaseProjectId}.firebaseapp.com` : '',
  projectId: firebaseProjectId,
  storageBucket: firebaseProjectId ? `${firebaseProjectId}.appspot.com` : '',
  appId: firebaseAppId,
};

// Initialize Firebase only if we have the minimum required configuration
let firebaseApp: any = {};
let firebaseAuth: any = {
  currentUser: null,
  onAuthStateChanged: (callback: any) => {
    callback(null);
    return () => {};
  }
};

try {
  if (firebaseApiKey && firebaseProjectId && firebaseAppId) {
    firebaseApp = initializeApp(firebaseConfig);
    firebaseAuth = getAuth(firebaseApp);
    console.log("Firebase initialized successfully");
  } else {
    console.warn("Firebase not initialized due to missing configuration");
  }
} catch (error) {
  console.error("Error initializing Firebase:", error);
}

// Create Google authentication provider
const googleProvider = new GoogleAuthProvider();
googleProvider.setCustomParameters({
  prompt: 'select_account'
});

// OTP Authentication functions
export const setupRecaptcha = async (phoneNumber: string, containerID: string) => {
  try {
    if (!firebaseAuth || typeof RecaptchaVerifier !== 'function') {
      throw new Error('Firebase authentication is not properly initialized');
    }
    
    // Create a new RecaptchaVerifier instance, or clear and recreate if it exists
    if ((window as any).recaptchaVerifier) {
      (window as any).recaptchaVerifier.clear();
    }
    
    const recaptchaVerifier = new RecaptchaVerifier(firebaseAuth, containerID, {
      size: 'invisible',
      callback: () => {
        console.log("reCAPTCHA solved, allowing signInWithPhoneNumber");
      },
      'expired-callback': () => {
        console.log("reCAPTCHA expired");
      }
    });
    
    // Store in window for potential reuse
    (window as any).recaptchaVerifier = recaptchaVerifier;

    return await signInWithPhoneNumber(firebaseAuth, phoneNumber, recaptchaVerifier);
  } catch (error: any) {
    console.error("Phone authentication failed:", error);
    
    // Provide more user-friendly error messages
    if (error.code === 'auth/invalid-phone-number') {
      throw new Error('The phone number is invalid. Please enter a valid phone number with country code (e.g., +1234567890).');
    } else if (error.code === 'auth/captcha-check-failed') {
      throw new Error('The reCAPTCHA verification failed. Please try again.');
    } else if (error.code === 'auth/quota-exceeded') {
      throw new Error('SMS quota has been exceeded. Please try again later.');
    } else if (error.code?.includes('permission-denied') || error.code?.includes('api-key')) {
      throw new Error('The Firebase API key has been suspended or is incorrectly configured. Please check your Firebase project configuration and billing status.');
    } else {
      throw error;
    }
  }
};

// Sign in with Google
export const signInWithGoogle = async () => {
  try {
    console.log("Attempting to sign in with Google using Firebase");
    
    // Check if Firebase is properly initialized
    if (!firebaseApiKey || !firebaseProjectId || !firebaseAppId) {
      console.error("Firebase configuration is incomplete. Cannot proceed with authentication.");
      throw new Error('Firebase configuration is incomplete. Please check your environment variables.');
    }
    
    if (!firebaseAuth || typeof signInWithRedirect !== 'function') {
      console.error("Firebase auth is not properly initialized");
      throw new Error('Authentication service is not available. Please try again later or contact support.');
    }
    
    console.log("Firebase configuration validated, proceeding with Google sign-in");
    
    // Use signInWithRedirect instead of popup as it's more reliable, especially in iframe environments
    await signInWithRedirect(firebaseAuth, googleProvider);
    
    console.log("Redirect to Google sign-in initiated");
    return null; // We'll handle the redirect result on page load
  } catch (error: any) {
    console.error("Error signing in with Google:", error);
    
    // Provide more user-friendly error messages
    if (error.code === 'auth/configuration-not-found') {
      throw new Error('Google authentication is not properly configured. Please check that your Firebase project has Google sign-in enabled and is properly set up.');
    } else if (error.code === 'auth/unauthorized-domain') {
      throw new Error('This domain is not authorized for authentication. Please add your domain in the Firebase console under Authentication > Settings > Authorized domains.');
    } else if (error.code === 'auth/cancelled-popup-request' || error.code === 'auth/popup-closed-by-user') {
      throw new Error('The authentication process was cancelled.');
    } else if (error.code === 'auth/popup-blocked') {
      throw new Error('The authentication popup was blocked by your browser. Please allow popups for this site.');
    } else if (error.code?.includes('permission-denied') || error.code?.includes('api-key')) {
      throw new Error('The Firebase API key has been suspended or is incorrectly configured. Please check your Firebase project configuration and billing status.');
    } else if (error.code === 'auth/internal-error') {
      throw new Error('An internal authentication error occurred. Please try again or contact support if the issue persists.');
    } else {
      // For unknown errors, include the original error message if available
      const errorMessage = error.message || 'An unknown error occurred';
      throw new Error(`Google sign-in failed: ${errorMessage}`);
    }
  }
};

// Handle Google redirect auth
export const handleGoogleRedirect = async () => {
  try {
    console.log("Checking for Google Auth redirect result");
    
    if (!firebaseAuth || typeof getRedirectResult !== 'function') {
      console.error("Firebase auth is not properly initialized for redirect handling");
      throw new Error('Authentication service is not available. Please try again later.');
    }
    
    const result = await getRedirectResult(firebaseAuth);
    
    if (result) {
      console.log("Successfully handled Google redirect auth");
      
      // Get the user's information
      const user = result.user;
      const credential = GoogleAuthProvider.credentialFromResult(result);
      const token = credential?.accessToken;
      
      console.log("Google auth successful - user email:", user.email);
      
      // Return the result with some additional context
      return {
        user,
        credential,
        token,
        success: true
      };
    } else {
      console.log("No redirect result found (expected on first page load)");
      return null;
    }
  } catch (error: any) {
    console.error("Error handling Google redirect:", error);
    
    let errorMessage = "Failed to complete Google Sign-In";
    
    // Provide more specific error messages for common issues
    if (error.code === 'auth/account-exists-with-different-credential') {
      errorMessage = "An account already exists with the same email address but different sign-in credentials. Try signing in with a different method.";
    } else if (error.code === 'auth/cancelled-popup-request') {
      errorMessage = "The authentication process was cancelled.";
    } else if (error.code === 'auth/popup-blocked') {
      errorMessage = "The authentication popup was blocked by the browser. Please allow popups for this site.";
    } else if (error.code === 'auth/popup-closed-by-user') {
      errorMessage = "The authentication popup was closed before the process completed.";
    } else if (error.code === 'auth/unauthorized-domain') {
      errorMessage = "This domain is not authorized for Google authentication. Please contact the administrator.";
    }
    
    // Throw a more informative error
    const enhancedError = new Error(errorMessage);
    (enhancedError as any).originalError = error;
    (enhancedError as any).code = error.code;
    throw enhancedError;
  }
};

// Sign out function
export const signOut = async () => {
  try {
    if (!firebaseAuth || typeof firebaseSignOut !== 'function') {
      console.error("Firebase auth is not properly initialized for sign out");
      throw new Error('Authentication service is not available. Please try again later.');
    }
    
    await firebaseSignOut(firebaseAuth);
    console.log("User signed out successfully");
    return true;
  } catch (error) {
    console.error("Error signing out: ", error);
    return false;
  }
};

export { firebaseApp, firebaseAuth as auth };