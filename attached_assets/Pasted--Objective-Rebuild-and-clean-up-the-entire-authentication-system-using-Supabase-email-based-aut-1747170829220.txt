🎯 Objective:
Rebuild and clean up the entire authentication system using **Supabase email-based auth only** (no OTP or Firebase). Ensure users can register/login securely, get assigned a role, and are routed and restricted across the platform accordingly. Also, delete all existing users for a fresh start.

---

🧱 Stack:
- Supabase Auth (Email/Password)
- Supabase Database (users table)
- React + React Router + Context API
- Backend: Supabase SDK
- Hosting: Replit

---

🔁 Step 1: Clear Existing Auth Data
- Use Supabase Admin API or SQL to delete all existing rows in the `auth.users` and `public.users` tables.
- Confirm deletion success in logs or console.

---

🧰 Step 2: Registration Flow
- On /register:
  - Capture: name, email, password, role (dropdown: admin, designer, sales)
  - Call Supabase `signUp()` method
  - On success:
    - Insert into custom `users` table:
      ```sql
      id (UUID from auth.user.id)
      name
      email
      role (enum: 'admin' | 'designer' | 'sales')
      created_at
      ```
  - Redirect to `/login` with success message

---

🔑 Step 3: Login Flow
- On /login:
  - Capture: email + password
  - Call Supabase `signInWithPassword()`
  - On success:
    - Fetch user profile from `users` table using auth.id
    - Store user info in React Context (`UserContext`)
    - Route by role:
      - admin → /dashboard
      - designer → /proposals
      - sales → /crm

---

🛂 Step 4: Route Guard & Role-Based Protection
- Create `PrivateRoute` HOC:
  - If not logged in → redirect to /login
  - If role mismatch → redirect to default route
  - Protect all core pages with role-specific access:
    ```js
    if (user.role !== 'admin') return <Navigate to="/not-authorized" />;
    ```

- Example routing logic:
  ```js
  <Route path="/dashboard" element={<PrivateRoute role="admin"><Dashboard /></PrivateRoute>} />
  <Route path="/crm" element={<PrivateRoute role="sales"><CRM /></PrivateRoute>} />
  <Route path="/proposals" element={<PrivateRoute role="designer"><Proposals /></PrivateRoute>} />
