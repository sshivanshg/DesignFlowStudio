You are a full-stack Replit Agent assigned to build “DesignFlowStudio” — a premium, modular SaaS web application for interior design businesses.

🧩 Follow this architecture and development prompt strictly. Do not skip any module or detail.

---

🎯 Modules to Build:

1. 📊 Dashboard
- Show quick summary metrics: Total Clients, Proposals, Estimates, Active Projects
- Charts: Monthly revenue, project stage breakdown
- CTA cards for key actions: “Create New Proposal”, “Add Estimate”, “Add Client”

2. 👥 CRM (Clients & Leads)
- Add/Edit/Delete clients
- Track leads with status: New, In Discussion, Won, Lost
- Activity log per client
- CRM table + single view modal
- Linked to Proposal, Estimate, Project modules

3. 📄 Proposal Builder (Like Canva)
- Drag-and-drop builder for proposal templates
- Each category (Modular Kitchen, Full Home, Living Room, etc) has 15 templates
- Add images, headings, pricing blocks, terms, and CTA
- Save as Draft or Final
- Allow client sharing via unique view-only link
- Export as PDF

4. 💰 Estimates
- Dynamic price generator based on pre-configured unit rates (sqft, units, items)
- Auto-calculate subtotal, tax, total
- Save, Duplicate, Edit
- Template-based estimations (e.g., 2BHK, Kitchen only, etc.)
- Export/Share

5. 🎨 Moodboard Generator
- Canva-style editor with drag-drop for creating visual concepts
- At least 15 design template layouts per category
- Each moodboard saved with Project or Client
- Allow image uploads, text annotations, save/export
- Smart suggestions based on client’s interest (future AI-powered)

6. 🏗️ Project Tracker & Logs (Merged)
- Unified system to track project by:
  - Rooms (Living Room, Kitchen, etc.)
  - Status (Planned, In Progress, Completed)
- Daily Logs + Attachments (photos, notes)
- Assign tasks, due dates
- Generate full downloadable progress reports
- Status-based filters and calendar sync (iCal ready)

7. 🧑‍💼 Clients Section
- Full client database
- Linked proposals, estimates, projects, logs
- View interaction history

8. ⚙️ Settings
- Company profile, logo, email
- Pre-defined estimation configs
- User preferences (currency, timezone, unit format)
- Email branding & link domain

9. 🔐 Authentication (Supabase)
- Supabase email-only authentication
- Role-based access (Admin, Team Member)
- Secure route handling (middleware guards)
- JWT token-based session, refresh on expiry
- Clear “Delete All Users” utility for fresh DB

---

📦 Backend/DB Layer (Drizzle + Supabase):
- Use Drizzle ORM for database queries
- All data stored in Supabase DB
- Create and migrate all tables per module: proposals, estimates, moodboards, projects, logs, users, roles, etc.
- Seed with sample data for quick testing

🧱 DB Tables (minimum):
- users, clients, leads, projects, proposals, estimates, moodboards, logs, settings, roles

---

🔁 Stitching & Routing:
- React Router or Next.js routing
- All modules connected via dashboard and sidebar nav
- Context API or Zustand for global state
- Pages must preload user context from Supabase JWT
- Props drilling must be minimized

---

🎨 UI/UX:
- Tailwind CSS + ShadCN UI
- Use flat, minimal UI with pastel color palette
- Follow Zenova branding vibe if applicable
- Use animated loaders, transitions (Framer Motion)
- Dark mode toggle included
- Project Tracker should resemble Notion + Trello UX

---

📤 Export + Share:
- Export Proposal/Estimate/Moodboard as PDF
- Sharable client links (view-only)
- Email sharing with Lexi-AI generated message

---

🧠 AI-Automation (Optional/Phase 2):
- Auto-generated estimates from brief
- Suggest design moodboard style based on input
- Proposal copy suggestions powered by OpenAI

---

🧪 Testing:
- Test auth with Supabase test users
- Test routing for all modules
- Console log every mutation
- Build responsive UI (desktop > tablet > mobile)

---

⛓️ Final Hook:
“Ensure every module works standalone and interconnected. Stitch data from one module into others where applicable. Think modular, scalable, and clean.”

---

💡 Developer Note:
Use `.env` file for Supabase keys, enable SSR caching for performance. Use folder structure like `/modules`, `/components`, `/hooks`, `/utils`, `/api`.

